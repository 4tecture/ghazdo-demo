# Trigger the pipeline on changes to the main branch
trigger:
- main

# Define the build environment
pool:
  vmImage: 'ubuntu-latest'

# Define variables used in the pipeline
variables:
  buildConfiguration: 'Release'
  workingDirectory: '$(Build.SourcesDirectory)/HelloWorld'

# Pipeline steps
steps:
# Initialize Advanced Security CodeQL
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    languages: 'csharp'
    querysuite: 'security-extended'
  displayName: 'Initialize CodeQL'

# Install .NET Core SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet
  displayName: 'Install .NET Core SDK'

# Restore dependencies using dotnet command
- script: dotnet restore $(workingDirectory)/HelloWorld.sln
  displayName: 'Restore dependencies'
  workingDirectory: $(workingDirectory)

# Build the solution using dotnet command
- script: dotnet build $(workingDirectory)/HelloWorld.sln --configuration $(buildConfiguration) --no-restore
  displayName: 'Build solution'
  workingDirectory: $(workingDirectory)

# Run unit tests using dotnet command
- script: dotnet test $(workingDirectory)/HelloWorld.sln --configuration $(buildConfiguration) --no-build --logger trx
  displayName: 'Run unit tests'
  workingDirectory: $(workingDirectory)

# Publish the web application to the artifact staging directory
- script: dotnet publish $(workingDirectory)/HelloWorld/HelloWorld.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
  displayName: 'Publish web app'
  workingDirectory: $(workingDirectory)

# Publish the web application as a pipeline artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'webapp'
    publishLocation: 'pipeline'
  displayName: 'Publish Pipeline Artifact'

# Run Advanced Security Dependency Scanning
- task: AdvancedSecurity-Dependency-Scanning@1
  displayName: 'Dependency Scanning'

# Run CodeQL Analysis
- task: AdvancedSecurity-Codeql-Analyze@1
  displayName: 'CodeQL Analysis'

# Publish CodeQL Analysis Results
- task: AdvancedSecurity-Publish@1
  displayName: 'Publish CodeQL Results'

# Conditional step for Pull Requests: Run a PowerShell script for additional PR validation
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - task: PowerShell@2
    displayName: 'PR Gating - Additional Checks for Pull Requests'
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/.azure-pipelines/CIGate.ps1
      pwsh: true
    env:
      MAPPED_ADO_PAT: $(GHAzDO_PAT)
